// TLE solution Time Complexity O(n^3)
public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> results = new ArrayList<List<Integer>>();
        if (nums == null || nums.length < 3) {
            return results;
        }
        Arrays.sort(nums);
        dfs(nums,0,new ArrayList<Integer>(),results);
        return results;
    }
    
    private void dfs(int[] nums, int start, List<Integer> com, List<List<Integer>> results) {
        if (com.size() == 3) {
            if (com.get(0) + com.get(1) + com.get(2) == 0) {
                results.add(new ArrayList(com));
            }
            return;
        }
        for (int i = start; i < nums.length; i++) {
            if (i != start && i>0 && nums[i] == nums[i-1] ) {
                continue;
            }
            com.add(nums[i]);
            dfs(nums,i+1,com,results);
            com.remove(com.size() - 1);
        }
    }

// BFS solution
// Time Complexity: O(n) Space Complexity: O(n)
class Solution {
    public void solve(char[][] board) {
        //check the illegal case
        if (board == null || board.length <= 2 || board[0].length <=  2) {
            return;
        }
        Queue<Point> bfs = new LinkedList<Point>();
        for (int i = 0; i < board.length; i++) {
            if (board[i][0] == 'O') {
                bfs.add(new Point(i,0));
            }
            if (board[i][board[0].length - 1] == 'O') {
                bfs.add(new Point(i,board[0].length - 1));
            }
        }
        for (int j = 0; j < board[0].length; j++) {
            if (board[0][j] == 'O') {
                bfs.add(new Point(0,j));
            }
            if (board[board.length - 1][j] == 'O') {
                bfs.add(new Point(board.length - 1,j));
            }
        }
        bfSearch(board,bfs);
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] == 'A') {
                    board[i][j] = 'O';
                }
                else if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    public void bfSearch(char[][] board, Queue<Point> bfs) {
        
        int[] delta_x = new int[]{1,-1,0,0};
        int[] delta_y = new int[]{0,0,1,-1};
        Point curt;
        while (!bfs.isEmpty()) {
            curt = bfs.poll();
            //mark
            board[curt.row][curt.col] = 'A';
            int new_row;
            int new_col;
            for (int i = 0; i < 4; i++) {
                new_row = curt.row + delta_x[i];
                new_col = curt.col + delta_y[i];
                if (checkBorder(board,new_row,new_col) && board[new_row][new_col] == 'O') {
                    bfs.offer(new Point(new_row,new_col));
                }
            }
        }
    }
    
    public boolean checkBorder(char[][] board, int row, int col) {
        if (row >= 0 && row < board.length && col >= 0 && col < board[0].length) {
            return true;
        }
        return false;
    }
}

class Point {
    int col;
    int row;
    
    public Point(int row, int col) {
        this.row = row;
        this.col = col;
    }
}

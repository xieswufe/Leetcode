class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // set the value of the obstacles as 0
        //check the illegal case
        if(obstacleGrid == null || obstacleGrid.length == 0 || obstacleGrid[0].length == 0 || obstacleGrid[0][0] == 1){
            return 0;
        }
        
        int m = obstacleGrid[0].length;
        int n = obstacleGrid.length;
        
        // Initialize the matrix
        int[][] paths = new int[n][m];
        
        for(int i = 0; i < m; i++){
            if(obstacleGrid[0][i] != 1){
                paths[0][i] = 1;
            }
            else{
                // after initializing, the value of the obstacleGrid is 0, so we just break, after this obstacle, the value should
                // be 0
                break;
            }
        }
        for(int j = 1; j < n ; j++){
            if(obstacleGrid[j][0] != 1){
                paths[j][0] = 1;
            }
            else{
                break;
            }
        }
        //Function
        for(int y = 1; y < n; y++){
            for(int x = 1; x < m; x++){
                if(obstacleGrid[y][x] == 1){
                    paths[y][x] = 0;
                }
                else{
                    paths[y][x] = paths[y-1][x] + paths[y][x-1];
                }
            }
        }
        return paths[n-1][m-1];
    }
}

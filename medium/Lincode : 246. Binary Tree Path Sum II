public class Solution {
    /*
     * @param root: the root of binary tree
     * @param target: An integer
     * @return: all valid paths
     */
     
     //Time Complexity: best : balanced tree O(nlog(n)) worst: linked list, no branching , O(n^2)
    List<List<Integer>> results = new ArrayList<List<Integer>>();
    
    public List<List<Integer>> binaryTreePathSum2(TreeNode root, int target) {
        // write your code here
        
        if (root == null) {
            return results;
        }

        helper(root,target,new ArrayList<Integer>());
        binaryTreePathSum2(root.left,target);
        binaryTreePathSum2(root.right,target);
        return results;
    }
    
    public void helper(TreeNode root, int remain, List<Integer> subset) {
        if (root == null) {
            return;
        }
        subset.add(root.val);
        if (remain == root.val) {
            results.add(new ArrayList<Integer>(subset));
        }
        helper(root.left,remain-root.val,subset);
        helper(root.right,remain-root.val,subset);
        subset.remove(subset.size() - 1);

    }
}

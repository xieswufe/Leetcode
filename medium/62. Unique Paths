public int uniquePaths(int m, int n) {
        // The robot can only move either down or right so we can define the number of ways to a point is the sum of the left and top 
        // points. We can initialize the value of the first row and the first column as 1 since there is only one way to these points.
        //First check illegal cases
        if(m == 0 && n== 0){
            return 0;
        }
        if(m == 1 || n == 1){
            return 1;
        }
        // initialize the function
        int[][] paths = new int[n][m];
        paths[0][0] = 1;
        for(int i = 1; i < n ; i++){
            paths[i][0] = 1;
        }
        for(int j = 1; j < m ; j++){
            paths[0][j] = 1;
        }
        // sum the value of the left and the upper points near a point
        for(int x = 1; x < n; x++){
            for(int y = 1; y < m; y++){
                paths[x][y] = paths[x-1][y] + paths[x][y-1];
            }
        }
        return paths[n-1][m-1];
        //Time Complexity: O(m*n) Space Complexity: O(m*n)
    }

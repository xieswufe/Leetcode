class Solution {
    //Time Complexity： O（n^3）
    public int minCut(String s) {
        int[] res = new int[s.length() + 1];
        res[0] = -1;
        for(int i = 1; i < res.length; i++){
            res[i] = Integer.MAX_VALUE;
            for(int j = 0; j < i;j++){
                String str = s.substring(j,i);
                if(isPalin(str)){
                    res[i] = Math.min(res[i],res[j] + 1);
                }
            }
        }
        return res[res.length - 1];
    }
    public boolean isPalin(String s){
        int i = 0;
        int j = s.length() - 1;
        while(i <= j){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}

//Time Complexity： O（n^2）
    public int minCut(String s) {
        int[] res = new int[s.length() + 1];
        res[0] = -1;
        boolean[][] ispa = isPalin(s);
        for(int i = 1; i < res.length; i++){
            res[i] = Integer.MAX_VALUE;
            for(int j = 0; j < i;j++){
                if(ispa[j][i-1]){
                    res[i] = Math.min(res[i],res[j] + 1);
                }
            }
        }
        return res[res.length - 1];
    }
    public boolean[][] isPalin(String s){
        boolean[][] res = new boolean[s.length()][s.length()];
        for(int i =0; i < res.length; i++){
            res[i][i] = true;
        }
        for(int i = 0; i < res.length - 1; i++){
            res[i][i+1] = (s.charAt(i) == s.charAt(i+1));
        }
        for(int len = 2; len < res.length; len++){
            for(int start = 0; start < res.length -len; start ++){
                 res[start][start + len] = (res[start + 1][start + len - 1]) && (s.charAt(start) == s.charAt(start + len));
            }
        }
        return res;
    }

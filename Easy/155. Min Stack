/* use stack */
class MinStack {
    private Stack<Integer> elementstack = new Stack();
    private Stack<Integer> supportstack = new Stack();
    /** initialize your data structure here. */
    public MinStack() {

    }
    
    public void push(int x) {
        if(supportstack.empty() || (x <= supportstack.peek())){
            supportstack.push(x);
        }
        elementstack.push(x);
    }
    
    public void pop() {
        if(elementstack.peek().equals(supportstack.peek())){
            supportstack.pop();
        }
        elementstack.pop();
    }
    
    public int top() {
        return elementstack.peek();
    }
    
    public int getMin() {
        return supportstack.peek();
    }
}

/*use node*/
class MinStack {
    Node head;
    public MinStack() {

    }
    
    public void push(int x) {
        if(head == null){
            head = new Node(x,x);
        }
        else{
            head = new Node(x,Math.min(head.min,x),head);
        }
    }
    
    public void pop() {
        head = head.next;
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
       return head.min;
    }
   private class Node{
    int val;
    int min;
    Node next;
    public Node(int val, int min){
        this.val = val;
        this.min = min;
        this.next = null;
        
    }
    public Node(int val,int min,Node next){
        this.val = val;
        this.min = min;
        this.next = next;
    }
}

}
